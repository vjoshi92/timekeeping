import React, { useState } from "react";
import {
  Box,
  Button,
  Divider,
  IconButton,
  List,
  ListItem,
  Modal,
  Stack,
  styled,
  Typography,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import WarningAmberIcon from "@mui/icons-material/WarningAmber";
import TextSnippetOutlined from "@mui/icons-material/TextSnippetOutlined";
import MuiInput from "./MuiInput";
import CloseIcon from "@mui/icons-material/Close";
import RemoveCircleIcon from "@mui/icons-material/RemoveCircle";
import clsx from "clsx";
import dayjs from "dayjs";
import { isAutogeneratedRow } from "@mui/x-data-grid-premium";
import DecimalInput from "./DecimalInput";
import Dropdown from "./Dropdown";
import { useDispatch, useSelector } from "react-redux";
import { addNotes } from "store/slice/TimesheetSlice";
import { formatFullDateString, formatFullTimeString, odataGetDateFormat, PrepareApprovalBatchPayload, PrepareBatchPayload } from "utils/AppUtil";
import { isRejected } from "@reduxjs/toolkit";
import {
  useGetRejectedReasonsQuery,
  useGetUserDataQuery,
  useMakeApprovalBatchCallMutation,
  useMakeBatchCallMutation,
} from "api/timesheetApi";
import RejectModal from "./RejectModal";

const StyledStack = styled(Box)(({ theme }) => ({
  display: "flex",
  flexDirection: "column",
  justifyContent: "space-between",
  height: "100%",
  width: "100%",
}));

const NotesTypography = styled(Typography)(({ theme }) => ({
  // mb: 2,
  textAlign: "center",
  fontSize: {
    xs: "1.1rem",
    sm: "1.25rem",
  },
  fontWeight: "700",
  fontSize: "16px",
}));

const ModalStyledTypography = styled(Box)(({ theme }) => ({
  fontWeight: 600,
  fontSize: "16px",
  marginBottom: "2%",
}));

const StyledDrawerDivider = styled(Divider)({
  mr: 1,
  marginBottom: "1rem",
  borderColor: "#ED6A15",
  height: "1px",
});

const StyledTypography = styled(Typography)({
  fontWeight: "700",
  marginTop: "10px",
});
const DayBox = styled(Box)(({ theme }) => ({
  fontWeight: "700",
  textAlign: "left",
}));
const EmptyBox = styled(Box)(({ theme }) => ({
  width: "100%",
  height: "100%",
}));

const DateBox = styled(Box)(({ theme }) => ({
  fontWeight: "400",
  fontSize: "14px",
  textAlign: "left",
}));

const ModalBox = styled(Box)(({ theme }) => ({
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: 400,
  backgroundColor: "#fff",
  boxShadow: 24,
  padding: theme.spacing(4),
  borderRadius: 4,
}));

const InputStyleBox = styled(Box)(({ theme }) => ({
  width: "100%",
  height: "100%",
  // backgroundColor: isToday ? '#FBE1D0' : 'transparent',
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  "& .css-m72fcg-MuiFormControl-root-MuiTextField-root": {
    width: "87% !important",
  },
  "& .MuiDataGrid-root": {
    // backgroundColor: isToday ? '#FBE1D0' : 'transparent',
    fontWeight: "700",
    fontSize: "16px",
  },
}));

// rejection component
const RejectionBox = styled(Box)(({ theme }) => ({
  backgroundColor: "#FFFFFF",
  // display: "flex",
  borderRadius: "6px",
  width: "400px",
  // height: "32%",
  justifyContent: "flex-end",
  alignItems: "center",
  // flexDirection: "column",
  padding: "20px",
}));

const RejectionMainBox = styled(Box)(({ theme }) => ({
  width: "100%",
  // display: "flex",
  // flexDirection: "column",
  justifyContent: "center",
  alignItems: "center",
  marginBottom: "5%",
}));

const RejectButtonStack = styled(Stack)(({ theme }) => ({
  width: "100%",
  direction: "row",
  display: "flex",
  justifyContent: "flex-end",
  marginTop: "4%",
}));

const CancelNoteButton = styled(Button)(({ theme }) => ({
  width: "100px",
  height: "42px",
  marginRight: "10px",
  borderRadius: "6px",
  border: "1px solid #ED6A15",
  boxShadow: 1,
}));

const StyledDropdown = styled(Dropdown)(
  ({ readOnly, backgroundColor, theme }) => ({
    backgroundColor: backgroundColor || (readOnly ? "#F5F5F5" : "transparent"),
    marginBottom: theme.spacing(2),
    width: "100%",
    [theme.breakpoints.down("sm")]: {
      fontSize: "14px",
    },
  })
);

const SaveNoteTypography = styled(Typography)(({ theme }) => ({
  fontSize: "15px",
  fontWeight: "700",
  color: "#FFFF",
}));

const CancelNoteTypography = styled(Typography)(({ theme }) => ({
  fontSize: "15px",
  fontWeight: "700",
  color: "#ED6A15",
}));

const SaveNoteButton = styled(Button)(({ theme }) => ({
  width: "100px",
  height: "42px",
  marginRight: "10px",
  borderRadius: "6px",
  backgroundColor: "#ED6A15",
  boxShadow: 1,
}));

const ModalTypography = styled(Typography)(({ theme }) => ({
  fontWeight: "700",
  fontSize: "14px",
  marginBottom: "3%",
}));

const TotalTypography = styled(Typography)(({ theme }) => ({
  color: "#121212DE",
  fontWeight: "700",
}));

const IconButtonStyle = styled(Box)(({ theme }) => ({
  width: "100%",
  height: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
}));

const ProjectData = [
  { id: 1, title: "Incorrect Time Entry" },
  { id: 2, title: "Incorrect Charge Code" },
  { id: 3, title: "Other" },
];

export const ReviewColumns = ({
  handleInputChange,
  handleDelete,
  selectedDate,
  handleRejected,
  isPrevious,
  handleRemoveRejection,
}) => {
  const [modalOpen, setModalOpen] = useState(false);
  const [activeInputId, setActiveInputId] = useState(null);
  const [hasNote, setHasNote] = useState(new Set());
  const [hasRejectedNote, setRejectedNote] = useState(new Set());
  const [openRejection, setOpenRejection] = React.useState(false);
  const [selectedReason, setSelectedReason] = useState({}); // Add this new state
  const notes = useSelector((state) => state?.CreateForm?.notes);
  const [newNote, setNewNote] = useState("");
  const [otherReason, setOtherReason] = useState("");
  const dispatch = useDispatch();
  const { data: rejectionReasons } = useGetRejectedReasonsQuery();
  const [rowObject, setRowObject] = useState({});
  const { data: userData } = useGetUserDataQuery();

  const [
    makeBatchCall,
    {
      isSuccess: batchCallIsSuccess,
      isLoading: batchCallLoading,
      error: batchCallIsError,
    },
  ] = useMakeApprovalBatchCallMutation();

  const handleApprovalClose = (type) => {
    if (type == "submit") {
      handleReject();
      // if (activeInputId) {
      //   setHasNote((prev) => new Set(prev).add(activeInputId));
      //   setRejectedNote((prev) => new Set(prev).add(activeInputId));
      //   if (hasNote?.size !== 0) {
      //     handleRejected(hasNote);
      //   } else {
      //     handleRejected(new Set().add(activeInputId));
      //   }
      //   const cdate = formatFullDateString(new Date());
      //   const ctime = formatFullTimeString(new Date());
      //   // const noteItem = ;
      //   dispatch(
      //     addNotes({
      //       id: Math.random(),
      //       content: `Rejected Reason: ${selectedReason} ${otherReason ? `: ${otherReason}` : ""}`,
      //       date: cdate,
      //       time: ctime,
      //       username: "Vijay Joshi",
      //       rejected: true,
      //     })
      //   );
      // }
    }else{
      setOpenRejection(false);
    }
  };

  const handleChangeEntry = () => {
    setOpenRejection(false);
  };

  const prepareRejectPayload = () => {
    const row = rowObject?.row;
    const index = rowObject?.index;
    const date = formatFullDateString(new Date());
    const notetime = formatFullTimeString(new Date());
    const userName = userData?.results[0]?.EmployeeName?.FormattedName;
    const prevNote = row[`day${index}Notes`];
    const reason = `${selectedReason?.label}${otherReason ? ` : ${otherReason}` : ''}`
    let noteString = `${reason},${date},${notetime},${userName}\n`;
    if (prevNote) {
      noteString = prevNote + "\n" + noteString;
    }

    const createDate = row[`day${index}DateCreate`];
    let dateCreate = createDate ? odataGetDateFormat(createDate) : "";
    const time = row[`day${index}TimeCreate`];
    let datewithTime = dateCreate;
    if (time) {
      const hour = time.substr(0, 2);
      const min = time.substr(2, 2);
      const sec = time.substr(4, 2);
      let aDateCreate = dateCreate.split("T");
      datewithTime = `${aDateCreate[0]}T${hour}:${min}:${sec}`;
    }

    const temp = {
      EmployeeID: row[`day${index}PERNR`],
      Counter: row[`day${index}Counter`],
      Status: "40",
      Reason: selectedReason?.value.toString() || "",
      DateCreate: datewithTime,
      TimeCreate: row[`day${index}TimeCreate`],
      ShortText: reason.substring(0, 40),
      Longtext: "X",
      LongtextData: noteString,
      __metadata: {
        type: "HCMFAB_APR_TIMESHEET_SRV.ApprovalDetails",
      },
    };

    // const temp = {
    //   __metadata: {
    //     type: "ZHCMFAB_TIMESHEET_MAINT_SRV.TimeEntry",
    //   },
    //   TimeEntryDataFields: {
    //     __metadata: {
    //       type: "ZHCMFAB_TIMESHEET_MAINT_SRV.TimeEntryDataFields",
    //     },
    //     CATSHOURS: row[`day${index}`],
    //     PERNR: userData?.results[0].EmployeeNumber,
    //     CATSQUANTITY: row[`day${index}`],
    //     LTXA1: noteString.substring(0, 40),
    //     LONGTEXT: "X",
    //     MEINH: "H",
    //     UNIT: "H",
    //     WORKDATE: row[`day${index}WORKDATE`],
    //     LONGTEXT_DATA: noteString,
    //     POSID: row?.level,
    //   },
    //   Pernr: userData?.results[0].EmployeeNumber,
    //   TimeEntryOperation: row[`day${index}timeEntryOperation`] || "C",
    //   Counter: row[`day${index}Counter`] || "",
    //   AllowRelease: "",
    //   RecRowNo: "1",
    // };
    return [temp];
  };

  const handleReject = async () => {
    const oPayload = prepareRejectPayload();
    const obatchPayload = PrepareApprovalBatchPayload(oPayload);
    const response = await makeBatchCall({ body: obatchPayload });    
    setOpenRejection(false);  
  };

  const openRejectionModal = (inputId, row, i) => {
    setOpenRejection(true);
    setActiveInputId(inputId);
    if (row[`day${i}Notes`]) {
      const notes = [];
      const noteStrings = row[`day${i}Notes`].split("\n");
      noteStrings.forEach((note) => {
        const noteIntenalArray = note.split(",");
        const tempNote = {
          id: Math.random(),
          content: noteIntenalArray[0],
          date: noteIntenalArray[1],
          time: noteIntenalArray[2],
          username: noteIntenalArray[3],
        };
        notes.push(tempNote);
      });

      setRowObject({
        row: row,
        index: i,
        notes: notes,
      });
    } else {
      setRowObject({
        row: row,
        index: i,
        notes: [],
      });
    }
  };

  const handleCopyModal = (inputId, row, i) => {
    setModalOpen(true);
    setActiveInputId(inputId);
    if (row[`day${i}Notes`]) {
      const notes = [];
      const noteStrings = row[`day${i}Notes`].split("\n");
      noteStrings.forEach((note) => {
        const noteIntenalArray = note.split(",");
        const tempNote = {
          id: Math.random(),
          content: noteIntenalArray[0],
          date: noteIntenalArray[1],
          time: noteIntenalArray[2],
          username: noteIntenalArray[3],
        };
        notes.push(tempNote);
      });

      setRowObject({
        row: row,
        index: i,
        notes: notes,
      });
    } else {
      setRowObject({
        row: row,
        index: i,
        notes: [],
      });
    }

    // setModalOpen(true);
    // const isRejectExist = notes?.filter((x) => x.rejected == true);
    // if (isReject && isRejectExist && isRejectExist.length == 0) {
    //   dispatch(
    //     addNotes({
    //       id: Math.random(),
    //       content: `Rejected Reason: Incorrect Time Entry`,
    //       date: "17 Jan 2025",
    //       time: "10:12:00",
    //       username: "Vijay Joshi",
    //       rejected: true,
    //     })
    //   );
    // }

    // setActiveInputId(inputId);
  };

  const addLocalNotes = (isRejected) => {
    if (newNote != "") {
      dispatch(
        addNotes({
          id: Math.random(),
          content: newNote,
          date: formatFullDateString(new Date()),
          time: formatFullTimeString(new Date()),
          username: "Vijay Joshi",
        })
      );
      setNewNote("");

      if (activeInputId) {
        setHasNote((prev) => new Set(prev).add(activeInputId));
      }
    }
  };

  const handleRemoveClick = () => {
    setOpenRejection(false);
    setSelectedReason("");
    setOtherReason("");
    setHasNote((prev) => {
      const newSet = new Set(prev);
      newSet.delete(activeInputId);
      return newSet;
    });
    setRejectedNote((prev) => {
      const newSet = new Set(prev);
      newSet.delete(activeInputId);
      return newSet;
    });
    handleRemoveRejection && handleRemoveRejection(activeInputId);
  };

  const handleSaveNotes = () => {
    if (activeInputId) {
      setHasNote((prev) => new Set(prev).add(activeInputId));
    }

    setModalOpen(false);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
  };

  const handleReasonChange = (event, value) => {
    setSelectedReason(value);
  };

  const getWeekDays = () => {
    let startDate;
    if (Array?.isArray(selectedDate) && selectedDate?.length === 0) {
      startDate = dayjs().startOf("week").add(1, "day");
    } else if (selectedDate) {
      const [startDateStr] = selectedDate?.split(" - ");
      startDate = dayjs(startDateStr, "DD MMM YYYY");
    } else {
      startDate = dayjs().startOf("week").add(1, "day");
    }

    const weekDays = [];
    for (let i = 0; i < 7; i++) {
      const currentDate = dayjs(startDate).add(i, "day");
      const isToday = currentDate?.isSame(dayjs(), "date");

      weekDays.push({
        field: `day${i}`,
        headerName: currentDate?.format("ddd"),
        flex: 1,
        minWidth: 120,
        borderBottom: "5px solid black",
        headerClassName: isToday ? "highlight-column" : "",

        renderHeader: () => (
          <StyledStack
          // sx={{

          //     // borderBottom:"5px solid black",
          //     // borderBottom: isToday ? '4px solid #ED6A15' : 'none',
          //     "& .MuiDataGrid-columnHeaderTitleContainer": {
          //         borderBottom: '5px solid orange !important',
          //     },
          //     "& .css-1k5yziq-MuiDataGrid-root .MuiDataGrid-row--borderBottom .MuiDataGrid-columnHeader": {
          //         borderBottom: '5px solid green !important',
          //     },
          // }}
          >
            <DayBox>{currentDate.format("ddd")}</DayBox>
            <DateBox>{currentDate.format("DD MMM")}</DateBox>
          </StyledStack>
        ),
        // valueGetter: (value, row) => {
        //   if (isAutogeneratedRow(row)) {
        //     return "[this is an autogenerated row]";
        //   }
        //   // return `title: ${value}`;
        // },
        renderCell: (params) => {
          const row = params?.row;
          if (params?.row?.isParent || isAutogeneratedRow(params?.row)) {
            return <EmptyBox></EmptyBox>;
          }

          if (params?.row?.totalRow) {
            return (
              <Typography fontWeight={700} mt={"1rem"} ml={"0.5rem"}>
                {params?.value}
              </Typography>
            );
          }

          const inputId = `${params.row.id}-day${i}`;
          const isActive = activeInputId === inputId && !modalOpen;
          const inputHasNote = hasNote.has(inputId);
          const inputRejectedNote = hasRejectedNote.has(inputId);

          const isFirstInput = i === 3 && params.row.isReject && isPrevious;
          const isNote = i === 3 && params.row.isNote;
          return (
            <InputStyleBox>
              {!isFirstInput ? (
                <Box
                  component="div"
                  sx={{
                    width: "87% !important",
                    verticalAlign: "unset",
                    backgroundColor: isFirstInput
                      ? "#ef0c0c30"
                      : inputRejectedNote
                        ? "#ef0c0c30"
                        : "#FFFFFF",
                    border: `1px solid ${isFirstInput ? "#FF0000" : inputRejectedNote ? "#FF0000" : "#000000"}`,
                    borderRadius: "4px",
                    padding: "0.5rem",
                    cursor: isFirstInput ? "default" : "pointer",
                    height: "1.2rem",
                    "&:hover": {
                      borderColor: isFirstInput
                        ? "#FF0000"
                        : inputRejectedNote
                          ? "#FF0000"
                          : "#000000",
                    },
                  }}
                  onClick={() => {
                    if (!isFirstInput && !isPrevious) {
                      setActiveInputId(inputId);
                      openRejectionModal(inputId, row, i);
                    }
                  }}
                >
                  <Typography color="#797b79 !important">
                    {params?.value}
                  </Typography>
                </Box>
              ) : (
                <Box
                  component="div"
                  sx={{
                    width: "87% !important",
                    verticalAlign: "unset",
                    backgroundColor: isFirstInput
                      ? "#ef0c0c30"
                      : inputRejectedNote
                        ? "#ef0c0c30"
                        : "#FFFFFF",
                    border: `1px solid ${isFirstInput ? "#FF0000" : inputRejectedNote ? "#FF0000" : "#000000"}`,
                    borderRadius: "4px",
                    padding: "0.5rem",
                    cursor: isFirstInput ? "pointer" : "pointer",
                    height: "1.2rem",
                    "&:hover": {
                      borderColor: isFirstInput
                        ? "#FF0000"
                        : inputRejectedNote
                          ? "#FF0000"
                          : "#000000",
                    },
                  }}
                  onClick={() => {
                    if (isFirstInput && isPrevious) {
                      setActiveInputId(inputId);
                      openRejectionModal(inputId, row, i);
                    }
                  }}
                >
                  <Typography color="#797b79 !important">
                    {params?.value}
                  </Typography>
                </Box>
              )}

              <IconButton
                size="small"
                onClick={() => handleCopyModal(inputId, row, i)}
                // disabled={isFirstInput}
              >
                {/* <TextSnippetOutlined
                  sx={{
                    color: isFirstInput ? "red" : inputHasNote ? "red" : "grey",
                    fontWeight: "400",
                  }}
                /> */}
                <TextSnippetOutlined
                  sx={{
                    fontWeight: "400",
                    color:
                      row[`day${i}Notes`] !== "" &&
                      row[`day${i}Notes`] !== undefined
                        ? "#ed6a15"
                        : "grey",
                  }}
                />
              </IconButton>
              <RejectModal
                open={modalOpen}
                onClose={handleCloseModal}
                activeInputId={activeInputId}
                setHasNote={setHasNote}
                rowObject={rowObject}
              />
            </InputStyleBox>
          );
        },
      });
    }
    return weekDays;
  };

  const weekDayColumns = getWeekDays();

  const columns = [
    ...weekDayColumns,
    {
      field: "weekTotal",
      headerName: "",
      flex: 0.5,
      minWidth: 100,
      renderCell: (params) => {
        if (params.row.isParent || isAutogeneratedRow(params.row)) {
          return <EmptyBox sx={{ backgroundColor: "transparent" }}></EmptyBox>;
        }

        return (
          <>
            <IconButtonStyle>
              <TotalTypography>{params?.value}</TotalTypography>
            </IconButtonStyle>
            {/* rejection popup */}
            <Modal
              keepMounted
              open={openRejection}
              // onClose={handleApprovalClose}
              sx={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
              }}
              aria-labelledby="keep-mounted-modal-title"
              aria-describedby="keep-mounted-modal-description"
              BackdropProps={{
                style: {
                  backgroundColor: "#121212 !important",
                  opacity: "20%",
                },
              }}
            >
              <RejectionBox>
                <RejectionMainBox>
                  <ModalTypography>Rejection Reason</ModalTypography>
                  <Stack
                    direction={"column"}
                    justifyContent={"space-between"}
                    sx={{ width: "100%" }}
                  >
                    <StyledDropdown
                      name="project"
                      options={rejectionReasons?.results.map((option) => ({
                        label: option?.Text,
                        value: option?.Reason,
                      }))}
                      onChange={handleReasonChange}
                      value={selectedReason?.label || "--"}
                    />
                  </Stack>
                </RejectionMainBox>
                {selectedReason?.label === "Other" && (
                  <MuiInput
                    rows={2}
                    multiline={true}
                    onChange={(value) => setOtherReason(value)}
                    placeholder="Please specify the reason"
                    sx={{ width: "100%", marginTop: "20px" }}
                    value={otherReason}
                  />
                )}
                <RejectButtonStack direction="row" spacing={3}>
                  <CancelNoteButton
                    id="keep-mounted-modal-title"
                    variant="h6"
                    component="h2"
                    size="small"
                    onClick={() => handleApprovalClose("cancel")}
                  >
                    <CancelNoteTypography>Cancel</CancelNoteTypography>
                  </CancelNoteButton>

                  <SaveNoteButton
                    id="keep-mounted-modal-description"
                    sx={{ mt: 2 }}
                    size="small"
                    onClick={() => handleApprovalClose("submit")}
                  >
                    <SaveNoteTypography>Submit</SaveNoteTypography>
                  </SaveNoteButton>
                </RejectButtonStack>
              </RejectionBox>
            </Modal>
          </>
        );
      },
    },
  ];

  return columns;
};
