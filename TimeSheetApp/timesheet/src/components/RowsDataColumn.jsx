import React, { useState } from "react";
import {
  Box,
  Button,
  Divider,
  IconButton,
  List,
  ListItem,
  ListItemText,
  Modal,
  styled,
  TextField,
  Typography,
} from "@mui/material";
import DeleteIcon from "@mui/icons-material/Delete";
import TextSnippetOutlined from "@mui/icons-material/TextSnippetOutlined";
import MuiInput from "./MuiInput";
import CloseIcon from "@mui/icons-material/Close";
import clsx from "clsx";
import dayjs from "dayjs";
import DescriptionIcon from "@mui/icons-material/Description";
import { isAutogeneratedRow } from "@mui/x-data-grid-premium";
import DecimalInput from "./DecimalInput";
import { useSelector } from "react-redux";
import TextSnippetIcon from "@mui/icons-material/TextSnippet";
import RejectModal from "./RejectModal";
import ChangeEntry from "./ChangeEntry";

const HeaderStyledBox = styled(Box)(({ theme }) => ({
  display: "flex",
  flexDirection: "column",
  // justifyContent: 'space-between',
  height: "100%",
  width: "100%",
}));

const StyledDrawerDivider = styled(Divider)({
  mr: 1,
  marginBottom: "1rem",
  borderColor: "#ED6A15",
  height: "1px",
});

const DayBox = styled(Box)(({ theme }) => ({
  fontWeight: "700",
  textAlign: "left",
}));
const EmptyBox = styled(Box)(({ theme }) => ({
  width: "100%",
  height: "100%",
}));

const DateBox = styled(Box)(({ theme }) => ({
  fontWeight: "400",
  fontSize: "14px",
  textAlign: "left",
}));
const TotalTypography = styled(Typography)(({ theme }) => ({
  color: "#121212DE",
  fontWeight: "700",
}));
const NotesTypography = styled(Typography)(({ theme }) => ({
  mb: 2,
  textAlign: "center",
  fontSize: {
    xs: "1.1rem",
    sm: "1.25rem",
  },
  fontWeight: "700",
  fontSize: "16px",
}));
const IconButtonStyle = styled(Box)(({ theme }) => ({
  width: "100%",
  height: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
}));
const InputStyleBox = styled(Box)(({ theme }) => ({
  width: "100%",
  height: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  "& .css-m72fcg-MuiFormControl-root-MuiTextField-root": {
    width: "87% !important",
  },
  "& .MuiDataGrid-root": {
    fontWeight: "700",
    fontSize: "16px",
  },
}));

const ModalBox = styled(Box)(({ theme }) => ({
  position: "absolute",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  width: 400,
  backgroundColor: "#fff",
  boxShadow: 24,
  padding: theme.spacing(4),
  borderRadius: 4,
}));

const ModalStyledTypography = styled(Box)(({ theme }) => ({
  fontWeight: 600,
  fontSize: "16px",
  marginBottom: "2%",
}));

const notes = [
  {
    id: 1,
    content: "Discuss project deadlines and deliverables.",
    date: "10/01/2024",
    time: "05.30pm",
    username: "Jon doe",
  },
  {
    id: 2,
    content: "Complete the UI design for the dashboard.",
    date: "05/02/2024",
    time: "02.30pm",
    username: "Paul heyman",
  },
  {
    id: 3,
    content: "Submit the monthly report by EOD.",
    date: "01/03/2024",
    time: "06.30pm",
    username: "Alice wok",
  },
];

export const RowsDataColumns = ({
  handleInputChange,
  handleDelete,
  selectedDate,
  dateWiseData,
  status,
}) => {
  const [modalOpen, setModalOpen] = useState(false);
  const [openChangeEntry, setOpenChangeEntry] = useState(false);
  const [activeInputId, setActiveInputId] = useState(null);
  const [rowObject, setRowObject] = useState({});
  const [hasNote, setHasNote] = useState(new Set());
  const totalValue = useSelector((state) => state?.CreateForm?.totals);

  // console.log("totalvalue", totalValue)

  const handleCopyModal = (inputId) => {
    setModalOpen(true);
    setActiveInputId(inputId);
  };

  const openNotesPopup = (inputId, row, i) => {
    setModalOpen(true);
    setActiveInputId(inputId);
    if (row[`day${i}Notes`]) {
      const notes = [];
      const noteStrings = row[`day${i}Notes`].split("\n");
      noteStrings.forEach((note) => {
        const noteIntenalArray = note.split(",");
        const tempNote = {
          id: Math.random(),
          content: noteIntenalArray[0],
          date: noteIntenalArray[1],
          time: noteIntenalArray[2],
          username: noteIntenalArray[3],
        };
        notes.push(tempNote);
      });

      setRowObject({
        row: row,
        index: i,
        notes: notes,
      });
    } else {
      setRowObject({
        row: row,
        index: i,
        notes: [],
      });
    }
  };

  const openChangePopup = (inputId, row, i, value) => {
    setActiveInputId(inputId);
    setRowObject({
      row: row,
      index: i,
      value: value,
    });
    setOpenChangeEntry(true);
  };

  const handleSaveNotes = () => {
    setModalOpen(false);
  };
  const handleCloseModal = () => {
    setModalOpen(false);
  };

  const handleCloseEntryModal = () => {
    setOpenChangeEntry(false);
  };

  const getWeekDays = () => {
    let startDate;
    if (Array?.isArray(selectedDate) && selectedDate?.length === 0) {
      startDate = dayjs().startOf("week").add(1, "day");
    } else if (Array.isArray(selectedDate) && selectedDate.length > 0) {
      const [startDateStr] = selectedDate;
      startDate = dayjs(startDateStr, "DD-MMM-YYYY");
    } else if (selectedDate) {
      const [startDateStr] = selectedDate?.split(" - ");
      startDate = dayjs(startDateStr, "DD MMM YYYY");
    } else {
      startDate = dayjs().startOf("week").add(1, "day");
    }

    const weekDays = [];
    for (let i = 0; i < 7; i++) {
      const currentDate = dayjs(startDate).add(i, "day");
      const isToday = currentDate?.isSame(dayjs(), "date");
      const isWeekend = currentDate.day() === 0 || currentDate.day() === 6;
      // console.log("currentDate>>>>>>>>", currentDate)
      weekDays.push({
        field: `day${i}`,
        headerName: currentDate?.format("ddd"),
        flex: 1,
        minWidth: 100,
        borderBottom: "5px solid black",
        headerClassName: isToday ? "highlight-column" : "",
        renderHeader: () => (
          <HeaderStyledBox
            justifyContent={"left"}
            sx={{
              borderBottom: isToday ? "4px solid #ED6A15" : "none",
              "& .MuiDataGrid-columnHeaderTitleContainer": {
                borderBottom: "5px solid orange !important",
              },
              "& .css-1k5yziq-MuiDataGrid-root .MuiDataGrid-row--borderBottom .MuiDataGrid-columnHeader":
                {
                  borderBottom: "5px solid green !important",
                },
            }}
          >
            <DayBox sx={{ color: isToday ? "#ED6A15" : "#121212DE" }}>
              {currentDate.format("ddd")}
            </DayBox>
            <DateBox style={{ color: isToday ? "#ED6A15" : "#121212DE" }}>
              {currentDate.format("DD MMM")}
            </DateBox>
          </HeaderStyledBox>
        ),
        valueGetter: (value, row) => {
          if (isAutogeneratedRow(row)) {
            return "[this is an autogenerated row]";
          }
          return `${value}`;
        },
        renderCell: (params) => {
          const row = params?.row;
          if (params?.row?.isParent || isAutogeneratedRow(params?.row)) {
            return (
              <EmptyBox
                sx={{
                  backgroundColor: isWeekend
                    ? "#dee2e6"
                    : isToday
                      ? "#FBE1D0"
                      : "transparent",
                }}
              ></EmptyBox>
            );
          }

          if (params?.row?.totalRow) {
            return (
              <Typography fontWeight={700} mt={"1rem"}>
                {params.value}
              </Typography>
            );
          }

          const inputId = `${params.row.id}-day${i}`;
          const isActive = activeInputId === inputId && !modalOpen;
          const inputHasNote = hasNote.has(inputId);
          return (
            <InputStyleBox
              sx={{
                backgroundColor: isWeekend
                  ? "#dee2e6"
                  : isToday
                    ? "#FBE1D0"
                    : "transparent",
                "& .MuiDataGrid-root": {
                  backgroundColor: isWeekend
                    ? "#dee2e6"
                    : isToday
                      ? "#FBE1D0"
                      : "transparent",
                },
              }}
            >
              {status === "Approved" ? (
                <Box
                  component="div"
                  sx={{
                    width: "87% !important",
                    verticalAlign: "unset",
                    backgroundColor: inputHasNote ? "#ef0c0c30" : "#FFFFFF",
                    border: `1px solid ${inputHasNote ? "#FF0000" : "#000000"}`,
                    borderRadius: "4px",
                    padding: "0.5rem",
                    cursor: "pointer",
                    height: "1.2rem",
                    "&:hover": {
                      borderColor: inputHasNote ? "#FF0000" : "#000000",
                    },
                  }}
                  onClick={() => {
                    //   if (!isFirstInput && !isPrevious) {
                    //     setActiveInputId(inputId);
                    //     handleRejection();
                    //   }
                  }}
                >
                  <Typography color="#797b79 !important">
                    {params?.value}
                  </Typography>
                </Box>
              ) : row[`day${i}STATUS`] === "40" ? (
                <Box
                  component="div"
                  sx={{
                    width: "87% !important",
                    verticalAlign: "unset",
                    backgroundColor: "#ef0c0c30",
                    border: `1px solid #FF0000`,
                    borderRadius: "4px",
                    padding: "0.5rem",
                    cursor: "pointer",
                    height: "1.2rem",
                    "&:hover": {
                      borderColor: "#FF0000",
                    },
                  }}
                  onClick={() => {
                    openChangePopup(inputId, row, i, params?.value);
                  }}
                >
                  <Typography color="#797b79 !important">
                    {params?.value}
                  </Typography>
                </Box>
              ) : (
                <DecimalInput
                  onChange={(value) =>
                    handleInputChange(`day${i}`, value, params?.row?.id)
                  }
                  value={params?.value}
                  disabled={false}
                  sx={{
                    width: "80% !important",
                    verticalAlign: "unset",
                    borderColor: row[`day${i}STATUS`] === "40" ? "red" : "grey",
                    backgroundColor: "#FFFFFF",
                    "& .MuiOutlinedInput-root": {
                      "& fieldset": {
                        border: isActive ? "1px solid #ED6A15" : "inherit",
                      },
                      "&  .MuiOutlinedInput-input": {
                        border: isActive ? "1px solid #ED6A15" : "inherit",
                      },
                    },
                  }}
                />
              )}
              <IconButton
                size="small"
                onClick={() => openNotesPopup(inputId, row, i)}
              >
                <TextSnippetOutlined
                  sx={{
                    fontWeight: "400",
                    color:
                      row[`day${i}Notes`] !== "" &&
                      row[`day${i}Notes`] !== undefined
                        ? "#ed6a15"
                        : "grey",
                  }}
                />
                {/* {row[`day${i}STATUS`] === "40" ? (
                  <TextSnippetIcon sx={{ fontWeight: "400" }} />
                ) : (
                  <TextSnippetOutlined sx={{ fontWeight: "400" }} />
                )} */}
                {/* sx={{
                    color: row[`day${i}STATUS`] === "40" ? "red" : "grey",
                    fontWeight: "400",
                  }}
                /> */}
              </IconButton>
              <RejectModal
                open={modalOpen}
                onClose={handleCloseModal}
                activeInputId={activeInputId}
                setHasNote={setHasNote}
                rowObject={rowObject}
              />
              <ChangeEntry
                open={openChangeEntry}
                handleClose={handleCloseEntryModal}
                activeInputId={activeInputId}
                rowObject={rowObject}
              />
            </InputStyleBox>
          );
        },
      });
    }
    return weekDays;
  };

  const weekDayColumns = getWeekDays();
  const columns = [
    ...weekDayColumns,
    {
      field: "weekTotal",
      headerName: "",
      flex: 0.5,
      minWidth: 100,
      renderCell: (params) => {
        if (params.row.isParent || isAutogeneratedRow(params.row)) {
          return <EmptyBox sx={{ backgroundColor: "transparent" }}></EmptyBox>;
        }
        return (
          <IconButtonStyle>
            <TotalTypography>{params.value}</TotalTypography>

            {!params.row.totalRow && (
              <IconButton
                disabled={status === "Approved"}
                size="small"
                color="secondary"
                onClick={() => handleDelete(params.row.id)}
              >
                <DeleteIcon />
              </IconButton>
            )}
          </IconButtonStyle>
        );
      },
    },
  ];

  return columns;
};
