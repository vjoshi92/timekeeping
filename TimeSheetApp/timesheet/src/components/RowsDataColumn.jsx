import React, { useState } from 'react';
import { Box, Button, IconButton, Modal, styled, TextField, Typography } from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import TextSnippetIcon from '@mui/icons-material/TextSnippet';
import MuiInput from './MuiInput';
import CloseIcon from '@mui/icons-material/Close';
import clsx from 'clsx';
import dayjs from 'dayjs';
import DescriptionIcon from '@mui/icons-material/Description';
import {
    isAutogeneratedRow,
} from '@mui/x-data-grid-premium';

const HeaderStyledBox = styled(Box)(({ theme }) => ({
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',
    height: '100%',
    width: "100%",
}));

const DayBox = styled(Box)(({ theme }) => ({
    fontWeight: '700',
    textAlign: 'center'
}));
const EmptyBox = styled(Box)(({ theme }) => ({
    width: '100%',
    height: '100%',
}));

const DateBox = styled(Box)(({ theme }) => ({
    fontWeight: '400',
    fontSize: '14px',
    textAlign: 'center'
}));
const StyledTypography = styled(Typography)(({ theme }) => ({
    color: "#121212DE",
    fontWeight: "700"
}));
const IconButtonStyle = styled(Box)(({ theme }) => ({
    width: '100%',
    height: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
}));
const InputStyleBox = styled(Box)(({ theme }) => ({
    width: '100%',
    height: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    "& .css-m72fcg-MuiFormControl-root-MuiTextField-root": {
        width: '87% !important',
    },
    "& .MuiDataGrid-root": {
        fontWeight: "700",
        fontSize: "16px",
    },
}));

const ModalBox = styled(Box)(({ theme }) => ({
    position: 'absolute',
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)',
    width: 400,
    backgroundColor: '#fff',
    boxShadow: 24,
    padding: theme.spacing(4),
    borderRadius: 4,
}));

export const RowsDataColumns = ({ handleInputChange, handleDelete, selectedDate }) => {
    const [modalOpen, setModalOpen] = useState(false);

    const handleCopyModal = () => {
        setModalOpen(true);
    };

    const handleCloseModal = () => {
        setModalOpen(false);
    };
    const getWeekDays = () => {
        let startDate;
        if (Array?.isArray(selectedDate) && selectedDate?.length === 0) {
            startDate = dayjs().startOf('week').add(1, 'day');
        } else if (selectedDate) {
            const [startDateStr] = selectedDate.split(' - ');
            startDate = dayjs(startDateStr, 'DD MMM YY');
        } else {
            startDate = dayjs().startOf('week').add(1, 'day');
        }

        const weekDays = [];
        for (let i = 0; i < 7; i++) {
            const currentDate = dayjs(startDate).add(i, 'day');
            const isToday = currentDate?.isSame(dayjs(), 'date');
            weekDays.push({
                field: `day${i}`,
                headerName: currentDate?.format('ddd'),
                flex: 1,
                minWidth: 120,
                borderBottom: "5px solid black",
                headerClassName: isToday ? 'highlight-column' : '',
                renderHeader: () => (
                    <HeaderStyledBox
                        sx={{
                            borderBottom: isToday ? '4px solid #ED6A15' : 'none',
                            "& .MuiDataGrid-columnHeaderTitleContainer": {
                                borderBottom: '5px solid orange !important',
                            },
                            "& .css-1k5yziq-MuiDataGrid-root .MuiDataGrid-row--borderBottom .MuiDataGrid-columnHeader": {
                                borderBottom: '5px solid green !important',
                            },
                        }}
                    >
                        <DayBox sx={{ color: isToday ? '#ED6A15' : '#121212DE' }}>
                            {currentDate.format('ddd')}
                        </DayBox>
                        <DateBox style={{ color: isToday ? '#ED6A15' : '#121212DE' }}>
                            {currentDate.format('DD MMM')}
                        </DateBox>
                    </HeaderStyledBox>
                ),
                valueGetter: (value, row) => {
                    if (isAutogeneratedRow(row)) {
                        return '[this is an autogenerated row]';
                    }
                    return `${value}`;
                },
                renderCell: (params) => {
                    if (params?.row?.isParent || isAutogeneratedRow(params?.row)) {

                        return <EmptyBox sx={{ backgroundColor: isToday ? '#FBE1D0' : 'transparent' }}></EmptyBox>;
                    }
                    return (
                        <InputStyleBox
                            sx={{
                                backgroundColor: isToday ? '#FBE1D0' : 'transparent',

                                "& .MuiDataGrid-root": {
                                    backgroundColor: isToday ? '#FBE1D0' : 'transparent',
                                },
                            }}
                        >
                            <MuiInput
                                type={'number'}
                                onChange={(value) => handleInputChange(`day${i}`, value, params?.row?.id)}
                                value={params?.value}
                                disabled={false}
                                sx={{
                                    width: '80% !important',
                                    verticalAlign: 'unset',
                                    backgroundColor: "#FFFFFF",
                                }}
                            />
                            <IconButton
                                size="small"
                                color="red"
                                onClick={() => handleCopyModal()}
                            >
                                <TextSnippetIcon />
                            </IconButton>
                            <Modal
                                key="notes-modal"
                                open={modalOpen}
                                // onClose={handleCloseModal}
                                aria-labelledby="notes-modal"
                                BackdropProps={{
                                    style: {
                                        backgroundColor: 'rgba(211, 211, 211, 0.7)',
                                        opacity: "80%"
                                    }
                                }}
                            >
                                <ModalBox
                                    sx={{
                                        width: {
                                            xs: '90%',
                                            sm: '80%',
                                            md: '60%',
                                            lg: '50%'
                                        },
                                        maxWidth: '600px',
                                        margin: 'auto',
                                        position: 'absolute',
                                        top: '50%',
                                        left: '50%',
                                        transform: 'translate(-50%, -50%)',
                                        padding: {
                                            xs: 2,
                                            sm: 3,
                                            md: 4
                                        }
                                    }}
                                >
                                    {/* Add close button */}
                                    <IconButton
                                        onClick={handleCloseModal}
                                        sx={{
                                            position: 'absolute',
                                            right: 8,
                                            top: 8,
                                            color: (theme) => theme.palette.grey[500],
                                        }}
                                    >
                                        <CloseIcon />
                                    </IconButton>

                                    <Typography
                                        variant="h6"
                                        component="h2"
                                        sx={{
                                            mb: 2,
                                            textAlign: 'center',
                                            fontSize: {
                                                xs: '1.1rem',
                                                sm: '1.25rem'
                                            }
                                        }}
                                    >
                                        Notes
                                    </Typography>
                                    <Box sx={{ mb: 3 }}>
                                        <Typography
                                            variant="body1"
                                            sx={{
                                                fontSize: {
                                                    xs: '0.875rem',
                                                    sm: '1rem'
                                                }
                                            }}
                                        >
                                            Your notes content goes here...
                                        </Typography>
                                    </Box>

                                    <Box sx={{
                                        display: 'flex',
                                        flexDirection: {
                                            xs: 'column',
                                            sm: 'row'
                                        },
                                        alignItems: 'center',
                                        gap: 2
                                    }}>
                                        <MuiInput
                                            type={'string'}
                                            onChange={(value) => handleInputChange(`day${i}`, value, params?.row?.id)}
                                            value={params?.value || 0}
                                            disabled={false}
                                            sx={{
                                                width: {
                                                    xs: '100% !important',
                                                    sm: '80% !important'
                                                },
                                                verticalAlign: 'unset',
                                                backgroundColor: "#FFFFFF",
                                            }}
                                        />
                                        <Button
                                            variant="contained"
                                            sx={{
                                                height: '40px',
                                                width: {
                                                    xs: '100%',
                                                    sm: '120px'
                                                },
                                                backgroundColor:"#ED6A15"
                                            }}
                                        >
                                            Save
                                        </Button>
                                    </Box>
                                </ModalBox>
                            </Modal>
                        </InputStyleBox>
                    );
                },
            });
        }
        return weekDays;
    };


    const weekDayColumns = getWeekDays();

    const columns = [


        ...weekDayColumns,
        {
            field: 'Actions',
            headerName: 'ACTIONS',
            flex: 0.5,
            minWidth: 100,
            valueGetter: (value, row) => {
                if (isAutogeneratedRow(row)) {
                    return '[this is an autogenerated row]';
                }
                return `title: ${value}`;
            },
            renderCell: (params) => {
                if (params.row.isParent || isAutogeneratedRow(params.row)) {
                    return <EmptyBox
                        sx={{ backgroundColor: 'transparent' }}></EmptyBox>;
                }
                return (
                    <IconButtonStyle >
                        {/* <IconButton
                            size="small"
                            color="red"
                        // onClick={() => handleDelete(params?.row?.id)}
                        >
                            <TextSnippetIcon />
                        </IconButton> */}
                        <StyledTypography>
                            0
                        </StyledTypography>
                        <IconButton
                            size="small"
                            color="secondary"
                            onClick={() => handleDelete(params?.row?.id)}
                        >
                            <DeleteIcon />
                        </IconButton>
                    </IconButtonStyle>
                );
            },
        },

    ];

    return columns;
};


// {
//     field: 'project',
//     headerName: '',
//     flex: 0.5,
//     minWidth: 100,
//     treeField: true,
//     renderCell: (params) => {
//         const indent = params.api.getRowNode(params.id)?.depth * 10 || 0;
//         return (
//             <Box sx={{
//                 ml: `${indent}px`, display: "flex",
//                 justifyContent: "center",
//                 alignItems: "center",
//                 marginTop: "10px",
//             }}>
//                 <Typography sx={{ color: "#121212DE", fontWeight: "700", marginLeft: "-10px" }}>
//                     {params.value}
//                 </Typography>
//             </Box>
//         );
//     },
// },

// {
//     field: 'level',
//     headerName: '',
//     flex: 0.5,
//     minWidth: 150,
//     treeField: true,
//     renderCell: (params) => {
//         const indent = params.api.getRowNode(params.id)?.depth * 10
//         return (
//             <Box
//                 sx={{
//                     ml: `${indent}px`,
//                     display: "flex",
//                     justifyContent: "center",
//                     alignItems: "center",
//                     marginTop: "10px",
//                     overflowX: "auto",
//                     // whiteSpace: "nowrap",
//                     scrollbarWidth: "none",
//                    '&::-webkit-scrollbar': { display: 'none' },
//                 }}>
//                 <Typography
//                 sx={{
//                     color: "#0073E6DE",
//                     fontWeight: "500",
//                     // marginLeft:"5px",
//                     overflow: "hidden",
//                     textOverflow: "ellipsis",
//                     whiteSpace: "nowrap",
//                     }}>
//                     {params.value}
//                 </Typography>
//             </Box>
//         );
//     },
// },